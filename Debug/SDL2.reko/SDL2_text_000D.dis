word32 fn6CA1E7F0(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax Top
// Preserved: ebp ebx esp
fn6CA1E7F0_entry:
l6CA1E7F0:
	word32 ebx_40
	branch fn6CA1EAEC() != 0x00000001 l6CA1E81A
l6CA1E81A:
	word32 esp_22
	call lock (retsize: 4;)
		uses: Stack +0004:0x00000008,Stack +0034:dwArg04
		defs: esp:esp_22
	Mem27[esp_22:word32] = Mem21[0x6CA4FA34:word32]
	word32 eax_28 = fn6CA1EAEC()
	Mem31[esp_22:word32] = Mem29[0x6CA4FA30:word32]
	word32 eax_32 = fn6CA1EAEC()
	Mem33[esp_22:word32] = dwArg04
	Mem36[esp_22 + 0x00000008:word32] = fp - 0x00000010
	Mem38[esp_22 + 0x00000004:word32] = fp - 0x00000014
	ebx_40 = __dllonexit(Mem38[esp_22:_onexit_t], Mem38[esp_22 + 4:(ptr32 (ptr32 PVFV))], Mem38[esp_22 + 8:(ptr32 (ptr32 PVFV))])
	Mem42[esp_22:word32] = eax_28
	Mem44[0x6CA4FA34:word32] = fn6CA1EAF4()
	Mem46[esp_22:word32] = eax_32
	word32 eax_47 = fn6CA1EAF4()
	Mem48[esp_22:word32] = 0x00000008
	Mem49[0x6CA4FA30:word32] = eax_47
	call unlock (retsize: 4;)
		uses: Stack +0008:dwArg04
l6CA1E80D:
	ebx_40 = _onexit(dwArg04)
l6CA1E88A:
	return ebx_40
fn6CA1E7F0_exit:


void fn6CA1E892(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut:
// Trashed: SCZO eax Top
// Preserved: ebp esp
fn6CA1E892_entry:
l6CA1E892:
	fn6CA1E7F0(dwArg04)
	return
fn6CA1E892_exit:


void fn6CA1E8D8()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO eax Top
// Preserved: ebp ebx esp
fn6CA1E8D8_entry:
l6CA1E8D8:
	word32 ebx_12 = Mem10[0x6CA1F720:word32]
	branch ebx_12 != 0xFFFFFFFF l6CA1E8FD
l6CA1E8EA:
	ebx_12 = 0x00000000
l6CA1E8EC:
	word32 eax_19 = ebx_12 + 0x00000001
	branch Mem10[eax_19 * 0x00000004 + 0x6CA1F720:word32] == 0x00000000 l6CA1E8FD
l6CA1E8FD:
	branch ebx_12 == 0x00000000 l6CA1E90B
l6CA1E90B:
	fn6CA1E892(0x6CA1E8B0)
	return
fn6CA1E8D8_exit:
l6CA1E901:
	call fn90909090 (retsize: 4;)
	ebx_12 = ebx_12 - 0x00000001
l6CA1E8F9:
	ebx_12 = eax_19


void fn6CA1E91D()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO eax Top
// Preserved: esp
fn6CA1E91D_entry:
l6CA1E91D:
	branch Mem0[0x6CA4F698:word32] != 0x00000000 l6CA1E932
l6CA1E932:
	return
l6CA1E926:
	Mem7[0x6CA4F698:word32] = 0x00000001
l6CA1E930_thunk_fn6CA1E8D8:
	fn6CA1E8D8()
	return
fn6CA1E91D_exit:


void fn6CA1E934()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO eax edx Top
// Preserved: ebp ebx edi esi esp
fn6CA1E934_entry:
l6CA1E934:
	word32 eax_18 = Mem16[0x6CA23070:word32]
	branch eax_18 == 0xBB40E64E l6CA1E960
l6CA1E960:
	GetSystemTimeAsFileTime(fp - 0x0000002C)
	word32 eax_31 = GetCurrentProcessId()
	word32 eax_33 = GetCurrentThreadId()
	word32 eax_35 = GetTickCount()
	QueryPerformanceCounter(fp - 0x00000024)
	word32 esi_48 = eax_33 ^ (eax_31 ^ ((dwLoc24 ^ 0x00000000) ^ dwLoc20)) ^ eax_35
	branch esi_48 != 0xBB40E64E l6CA1E9B7
l6CA1E9B2:
	esi_48 = 0xBB40E64F
l6CA1E9B7:
	Mem53[0x6CA23070:word32] = esi_48
	Mem55[0x6CA23074:word32] = ~esi_48
l6CA1E957:
	Mem57[0x6CA23074:word32] = ~eax_18
l6CA1E9C5:
	return
fn6CA1E934_exit:


word32 fn6CA1EA81(word32 ecx, word32 edx, word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ecx:[0..31] edx:[0..31] Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: ecx
// Trashed: SCZO eax ecx edx Top
// Preserved: ebp ebx esp
fn6CA1EA81_entry:
l6CA1EA81:
	branch Mem10[0x6CA2306C:word32] == 0x00000002 l6CA1EA9E
l6CA1EA94:
	Mem15[0x6CA2306C:word32] = 0x00000002
l6CA1EA9E:
	branch dwArg08 == 0x00000002 l6CA1EAC2
l6CA1EAC2:
	word32 ebx_19 = 0x6CA58028
l6CA1EAC7:
	branch ebx_19 == 0x6CA58028 l6CA1EADC
l6CA1EACF:
	word32 eax_24 = Mem42[ebx_19:word32]
	branch eax_24 == 0x00000000 l6CA1EAD7
l6CA1EAD5:
	call eax_24 (retsize: 4;)
		uses: ecx:ecx_76,edx:edx_75,Stack +0008:dwArg04,Stack +000C:dwArg08,Stack +0010:dwArg0C
		defs: ecx:ecx_79,edx:edx_78
l6CA1EAD7:
	ebx_19 = ebx_19 + 0x00000004
l6CA1EAA3:
	branch dwArg08 != 0x00000001 l6CA1EADC
l6CA1EAA6:
	fn6CA1EF96(ecx, edx, 0x00000001)
l6CA1EADC:
	return ecx
fn6CA1EA81_exit:


word32 fn6CA1EAEC()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: eax
// Trashed: eax Top
// Preserved: ebp esp
fn6CA1EAEC_entry:
l6CA1EAEC:
	return dwArg04
fn6CA1EAEC_exit:


word32 fn6CA1EAF4()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: eax
// Trashed: eax Top
// Preserved: ebp esp
fn6CA1EAF4_entry:
l6CA1EAF4:
	return dwArg04
fn6CA1EAF4_exit:


word32 fn6CA1EAFC(word32 dwArg04, ptr32 & ecxOut, ptr32 & ebxOut, ptr32 & ebpOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut: eax ebp ebx ecx
// Trashed: SCZO eax ebp ebx Top
// Preserved: esp
fn6CA1EAFC_entry:
l6CA1EAFC:
	fputs(0x6CA4A6B4, iob + 0x00000040)
	word32 eax_22 = iob + 0x00000040
	call msvcrt.dll!vfprintf (retsize: 4;)
		uses: eax:eax_22,Stack +0004:eax_22,Stack +0008:dwArg04,Stack +000C:fp + 0x00000008,Stack +0024:dwArg04
	abort()
l6CA1EB39_thunk_fn6CA1EB3E:
	word32 ecx_52
	word32 eax_30 = fn6CA1EB3E(eax, out ecx_52)
	ecxOut = <invalid>
	ebxOut = fp + 0x00000008
	ebpOut = fp - 4
	return eax_30
fn6CA1EAFC_exit:


word32 fn6CA1EB3E(word32 eax, ptr32 & ecxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax:[0..31]
// LiveOut: eax ecx
// Trashed: SCZO eax ecx edx Top
// Preserved: ebp ebx edi esi esp
fn6CA1EB3E_entry:
l6CA1EB3E:
	word32 ebx_158 = 0x00000000
	word32 esi_21 = Mem16[0x6CA4F9F8:word32]
	word32 edx_136 = Mem16[0x6CA4F9FC:word32] + 0x0000000C
l6CA1EB58:
	word32 ecx_126
	branch esi_21 <= ebx_158 l6CA1EB76
l6CA1EB76:
	word32 eax_31 = fn6CA1F130(eax, out ecx_126)
	branch eax_31 != 0x00000000 l6CA1EB96
l6CA1EB96:
	word32 ebx_42 = ebx_158 *s 0x00000014
	word32 eax_44 = Mem29[0x6CA4F9FC:word32] + ebx_42
	Mem46[eax_44 + 0x00000010:word32] = eax_31
	Mem47[eax_44:word32] = 0x00000000
	word32 eax_55 = fn6CA1F1E2() + Mem47[eax_31 + 0x0000000C:word32]
	Mem56[Mem47[0x6CA4F9FC:word32] + 0x0000000C + ebx_42:word32] = eax_55
	branch VirtualQuery(eax_55, fp - 0x00000038, 0x0000001C) != 0x00000000 l6CA1EBFA
l6CA1EBDA:
	word32 ebx_256
	word32 ebp_257
	fn6CA1EAFC(0x6CA4A6F0, out ecx_126, out ebx_256, out ebp_257)
l6CA1EBFA:
	eax = dwLoc24
	branch (dwLoc24 - 0x00000040 & 0xFFFFFFBF) == 0x00000000 l6CA1EC55
l6CA1EC05:
	eax = dwLoc24 - 0x00000004 & 0xFFFFFFFB
	branch eax == 0x00000000 l6CA1EC55
l6CA1EC0D:
	word32 ebx_97 = ebx_42 + Mem82[0x6CA4F9FC:word32]
	Mem98[ebx_97 + 0x00000004:word32] = dwLoc38
	Mem99[ebx_97 + 0x00000008:word32] = dwLoc2C
	eax = VirtualProtect(dwLoc38, dwLoc2C, 0x00000040, ebx_97)
	branch eax != 0x00000000 l6CA1EC55
l6CA1EC3F:
	GetLastError()
l6CA1EB86:
l6CA1EC50:
	// Failed to bind call argument.
	// Please report this issue at https://github.com/uxmal/reko
	word32 stackArg4 = <invalid>
	word32 ebx_254
	word32 ebp_255
	eax = fn6CA1EAFC(stackArg4, out ecx_126, out ebx_254, out ebp_255)
l6CA1EC55:
	Mem134[0x6CA4F9F8:word32] = Mem131[0x6CA4F9F8:word32] + 0x00000001
l6CA1EB5C:
	word32 ecx_138 = Mem16[edx_136:word32]
	branch ecx_138 >u eax l6CA1EB70
l6CA1EB62:
	ecx_126 = ecx_138 + Mem16[Mem16[edx_136 + 0x00000004:word32] + 0x00000008:word32]
	branch eax <u ecx_126 l6CA1EC5B
l6CA1EC5B:
	ecxOut = ecx_126
	return eax
fn6CA1EB3E_exit:
l6CA1EB70:
	ebx_158 = ebx_158 + 0x00000001
	edx_136 = edx_136 + 0x00000014


word32 fn6CA1EC63(word32 ecx, word32 edi, ptr32 & ebxOut, ptr32 & ebpOut, ptr32 & esiOut, ptr32 & ediOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ecx:[0..31] edi:[0..31]
// LiveOut: ebp ebx ecx edi esi
// Trashed: SCZO eax ebp ebx ecx edi edx esi Top
// Preserved: esp
fn6CA1EC63_entry:
l6CA1EC63:
	word32 ebp_144 = fp - 4
	branch Mem16[0x6CA4F9F4:word32] != 0x00000000 l6CA1EE53
l6CA1EC7C:
	Mem23[0x6CA4F9F4:word32] = 0x00000001
	word32 edx_149
	word32 eax_33 = fn6CA1F164(out edx_149) *s 0x00000014 + 0x0000001B >>u 0x00000004 << 0x00000004
	fn6CA1F2C4(eax_33)
	Mem39[0x6CA4F9F8:word32] = 0x00000000
	word32 esp_40 = fp - 0x0000004C - eax_33
	Mem43[0x6CA4F9FC:word32] = esp_40 + 0x0000001F & 0xFFFFFFF0
	branch true l6CA1EE53
l6CA1ECC7:
	word32 ebx_169 = 0x6CA4C6EC
	branch true l6CA1ECEA
l6CA1ECD1:
	branch (Mem43[0x6CA4C6F0:word32] | Mem43[0x6CA4C6EC:word32] | Mem43[0x6CA4C6F4:word32]) != 0x00000000 l6CA1ECEA
l6CA1ECE7_1:
	ebx_169 = 0x6CA4C6F8
l6CA1ECEA:
	branch Mem43[ebx_169:word32] != 0x00000000 l6CA1ECF5
l6CA1ECEF:
	branch Mem43[ebx_169 + 0x00000004:word32] == 0x00000000 l6CA1ED22
l6CA1ED22:
	word32 eax_143
	word32 esi_154
	word32 eax_65 = Mem43[ebx_169 + 0x00000008:word32]
	word32 ebx_132 = ebx_169 + 0x0000000C
	branch eax_65 == 0x00000001 l6CA1ED7F
l6CA1ED2D:
	Mem70[esp_40 + 0x00000004:word32] = eax_65
	Mem71[esp_40:word32] = 0x6CA4A748
l6CA1EDC3:
	word32 ecx_288
	eax_143 = fn6CA1EAFC(Mem73[esp_40:word32], out ecx_288, out ebx_132, out ebp_144)
l6CA1EDC8:
	esi_154 = (word32) Mem82[edi + 0x6C940000:word16]
	branch Mem82[edi + 0x6C940000:word16] >= 0x0000 l6CA1ED53
l6CA1EDDD:
	esi_154 = esi_154 | 0xFFFF0000
l6CA1ED53:
	word32 esi_94 = esi_154 - Mem91[ebp_144 - 0x00000030:word32] + ecx
	word16 si_106 = SLICE(esi_94, word16, 0)
	branch edx_149 == 0x00000010 l6CA1EDF3
l6CA1EDF3:
	fn6CA1EB3E(eax_143, out ecx)
	Mem108[edi + 0x6C940000:word16] = si_106
l6CA1ED61:
	branch edx_149 == 0x00000020 l6CA1EE04
l6CA1EE04:
	fn6CA1EB3E(eax_143, out ecx)
	Mem118[edi + 0x6C940000:word32] = esi_94
l6CA1ED6A:
	branch edx_149 != 0x00000008 l6CA1ED7C
l6CA1ED6F:
	fn6CA1EB3E(eax_143, out ecx)
	Mem130[edi + 0x6C940000:byte] = SLICE(esi_94, byte, 0)
l6CA1ED7C:
	ebx_132 = ebx_132 + 0x0000000C
l6CA1ED7F:
	branch ebx_132 >=u 0x6CA4C6EC l6CA1EE48
l6CA1ED8B:
	edi = Mem138[ebx_132 + 0x00000004:word32]
	word32 edx_140 = Mem138[ebx_132:word32]
	Mem147[ebp_144 - 0x00000030:word32] = edx_140 + 0x6C940000
	eax_143 = edi + 0x6C940000
	ecx = Mem147[edx_140 + 0x6C940000:word32]
	edx_149 = (word32) Mem147[ebx_132 + 0x00000008:byte]
	branch edx_149 == 0x00000010 l6CA1EDC8
l6CA1EDAE:
	branch edx_149 == 0x00000020 l6CA1EDE8
l6CA1EDE8:
	esi_154 = Mem147[edi + 0x6C940000:word32]
l6CA1EDB3:
	branch edx_149 == 0x00000008 l6CA1ED3D
l6CA1ED3D:
	esi_154 = (word32) Mem147[edi + 0x6C940000:byte]
	branch Mem147[edi + 0x6C940000:byte] >= 0x00 l6CA1ED53
l6CA1ED4D:
	esi_154 = esi_154 | 0xFFFFFF00
l6CA1EDB8:
	Mem167[esp_40 + 0x00000004:word32] = edx_149
	Mem168[esp_40:word32] = 0x6CA4A77A
l6CA1ECF5:
	branch ebx_169 >=u 0x6CA4C6EC l6CA1EE48
l6CA1EE48:
	branch Mem173[ebp_144 - 0x0000002C:word32] < Mem173[0x6CA4F9F8:word32] l6CA1EE14
l6CA1EE14:
	word32 eax_178 = Mem173[ebp_144 - 0x0000002C:word32] *s 0x00000014 + Mem173[0x6CA4F9FC:word32]
	word32 edx_179 = Mem173[eax_178:word32]
	branch edx_179 == 0x00000000 l6CA1EE45
l6CA1EE24:
	Mem185[esp_40 + 0x00000008:word32] = edx_179
	ecx = ebp_144 - 0x0000001C
	Mem186[esp_40 + 0x0000000C:word32] = ecx
	Mem188[esp_40 + 0x00000004:word32] = Mem186[eax_178 + 0x00000008:word32]
	Mem190[esp_40:word32] = Mem188[eax_178 + 0x00000004:word32]
	VirtualProtect(Mem190[esp_40:LPVOID], Mem190[esp_40 + 4:SIZE_T], Mem190[esp_40 + 8:DWORD], Mem190[esp_40 + 12:PDWORD])
l6CA1EE45:
	Mem198[ebp_144 - 0x0000002C:word32] = Mem196[ebp_144 - 0x0000002C:word32] + 0x00000001
l6CA1EE53:
	word32 esp_201 = ebp_144 - 0x0000000C
	word32 esi_205 = Mem202[esp_201 + 4:word32]
	word32 edi_207 = Mem202[esp_201 + 8:word32]
	word32 ebp_209 = Mem202[esp_201 + 12:word32]
	ebxOut = Mem202[esp_201:word32]
	ebpOut = ebp_209
	esiOut = esi_205
	ediOut = edi_207
	return ecx
fn6CA1EC63_exit:
l6CA1ED01:
	word32 esi_212 = Mem211[ebx_169 + 0x00000004:word32]
	word32 edi_215 = Mem211[ebx_169:word32] + Mem211[esi_212 + 0x6C940000:word32]
	fn6CA1EB3E(esi_212 + 0x6C940000, out ecx)
	Mem225[esi_212 + 0x6C940000:word32] = edi_215
	ebx_169 = ebx_169 + 0x00000008


void fn6CA1EE5C(word32 eax, word32 ecx, word32 edx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax:[0..31] ecx:[0..31] edx:[0..31]
// LiveOut:
// Trashed: SCZO eax Top
// Preserved: ebp ebx ecx edx esi esp
fn6CA1EE5C_entry:
l6CA1EE5C:
	EnterCriticalSection(0x6CA4FA08)
	word32 ebx_18 = Mem16[0x6CA4FA00:word32]
	word32 esp_19 = fp - 0x0000001C
l6CA1EE78:
	branch ebx_18 == 0x00000000 l6CA1EEA5
l6CA1EEA5:
	Mem27[esp_19:word32] = 0x6CA4FA08
	LeaveCriticalSection(Mem27[esp_19:LPCRITICAL_SECTION])
	Mem31[esp_19:word32] = eax
	return
fn6CA1EE5C_exit:
l6CA1EE7C:
	word32 edx_63
	word32 eax_62
	Mem42[esp_19:word32] = Mem40[ebx_18:word32]
	word32 esp_44 = esp_19 + 0x00000004
	word32 eax_43 = TlsGetValue(Mem42[esp_19:DWORD])
	Mem48[esp_44 - 4:word32] = edx
	esp_19 = esp_44 - 4
	eax = GetLastError()
	branch eax != 0x00000000 l6CA1EEA0
l6CA1EE94:
	branch eax_43 == 0x00000000 l6CA1EEA0
l6CA1EE98:
	word32 eax_56 = Mem48[ebx_18 + 0x00000004:word32]
	Mem57[esp_44 - 4:word32] = eax_43
	call eax_56 (retsize: 4;)
		uses: eax:eax_62,ecx:ecx_58,edx:edx_63
		defs: eax:eax_62,ecx:ecx_61,edx:edx_63,esp:esp_60
	eax = eax_62
	edx = edx_63
l6CA1EEA0:
	ebx_18 = Mem67[ebx_18 + 0x00000008:word32]


void fn6CA1EF96(word32 ecx, word32 edx, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ecx:[0..31] edx:[0..31] Stack +0008:[0..31]
// LiveOut:
// Trashed: SCZO eax Top
// Preserved: ebp ebx esp
fn6CA1EF96_entry:
l6CA1EF96:
	branch dwArg08 == 0x00000001 l6CA1EFC0
l6CA1EFC0:
	branch Mem10[0x6CA4FA04:word32] != 0x00000000 l6CA1EFD7
l6CA1EFC9:
	InitializeCriticalSection(0x6CA4FA08)
l6CA1EFD7:
	Mem24[0x6CA4FA04:word32] = 0x00000001
l6CA1EFA5:
	branch dwArg08 == 0x00000000 l6CA1EFE3
l6CA1EFE3:
	word32 eax_28 = Mem10[0x6CA4FA04:word32]
	branch eax_28 == 0x00000000 l6CA1EFF1
l6CA1EFEC:
	fn6CA1EE5C(eax_28, ecx, edx)
l6CA1EFF1:
	word32 eax_42 = Mem10[0x6CA4FA00:word32]
	branch Mem10[0x6CA4FA04:word32] != 0x00000001 l6CA1F04A
l6CA1EFFE:
	branch eax_42 == 0x00000000 l6CA1F011
l6CA1F011:
	Mem48[0x6CA4FA00:word32] = 0x00000000
	Mem49[0x6CA4FA04:word32] = 0x00000000
	DeleteCriticalSection(0x6CA4FA08)
l6CA1F002:
	word32 ebx_56 = Mem55[eax_42 + 0x00000008:word32]
	free(eax_42)
	eax_42 = ebx_56
l6CA1EFA9:
	branch dwArg08 == 0x00000002 l6CA1F035
l6CA1F035:
	fn6CA1F2C0()
l6CA1EFB2:
	branch dwArg08 == 0x00000003 l6CA1F03C
l6CA1F03C:
	word32 eax_63 = Mem10[0x6CA4FA04:word32]
	branch eax_63 == 0x00000000 l6CA1F04A
l6CA1F045:
	fn6CA1EE5C(eax_63, ecx, edx)
l6CA1EFBB:
l6CA1F04A:
	return
fn6CA1EF96_exit:


word32 fn6CA1F054(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax edx Top
// Preserved: ebp esp
fn6CA1F054_entry:
l6CA1F054:
	word32 eax_30 = 0x00000000
	branch Mem6[dwArg04:word16] != 0x5A4D l6CA1F079
l6CA1F063:
	word32 edx_12 = dwArg04 + Mem6[dwArg04 + 0x0000003C:word32]
	branch Mem6[edx_12:word32] != 0x00004550 l6CA1F079
l6CA1F06E:
	eax_30 = (uint32) (uint8) (Mem6[edx_12 + 0x00000018:word16] == 0x010B) (alias)
l6CA1F079:
	return eax_30
fn6CA1F054_exit:


word32 fn6CA1F07B(word32 dwArg04, word32 dwArg08, ptr32 & ecxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax ecx
// Trashed: SCZO eax ecx edx Top
// Preserved: ebp ebx esi esp
fn6CA1F07B_entry:
l6CA1F07B:
	word32 edx_17 = dwArg04 + Mem15[dwArg04 + 0x0000003C:word32]
	word32 ebx_16 = 0x00000000
	word32 esi_20 = (word32) Mem15[edx_17 + 0x00000006:word16]
	word32 eax_21 = edx_17 + 0x00000018 + (word32) Mem15[edx_17 + 0x00000014:word16]
l6CA1F097:
	branch esi_20 <=u ebx_16 l6CA1F0AF
l6CA1F0AF:
	eax_21 = 0x00000000
l6CA1F09B:
	word32 edx_31 = Mem15[eax_21 + 0x0000000C:word32]
	branch edx_31 >u dwArg08 l6CA1F0A9
l6CA1F0A2:
	branch edx_31 + Mem15[eax_21 + 0x00000008:word32] >u dwArg08 l6CA1F0B1
l6CA1F0B1:
	ecxOut = dwArg08
	return eax_21
fn6CA1F07B_exit:
l6CA1F0A9:
	ebx_16 = ebx_16 + 0x00000001
	eax_21 = eax_21 + 0x00000028


word32 fn6CA1F130(word32 dwArg04, ptr32 & ecxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut: eax ecx
// Trashed: SCZO eax ecx edx Top
// Preserved: ebp esp
fn6CA1F130_entry:
l6CA1F130:
	word32 eax_18 = 0x00000000
	branch fn6CA1F054(0x6C940000) == 0x00000000 l6CA1F162
l6CA1F14A:
	eax_18 = fn6CA1F07B(0x6C940000, dwArg04 - 0x6C940000, out ecx)
l6CA1F162:
	ecxOut = ecx
	return eax_18
fn6CA1F130_exit:


word32 fn6CA1F164(ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: eax edx
// Trashed: SCZO eax edx Top
// Preserved: ebp esp
fn6CA1F164_entry:
l6CA1F164:
	word32 edx_17 = 0x00000000
	branch fn6CA1F054(0x6C940000) == 0x00000000 l6CA1F188
l6CA1F17C:
	edx_17 = (word32) Mem10[Mem10[0x6C94003C:word32] + 0x6C940006:word16]
l6CA1F188:
	edxOut = edx_17
	return edx_17
fn6CA1F164_exit:


word32 fn6CA1F1E2()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: eax
// Trashed: SCZO eax edx Top
// Preserved: ebp esp
fn6CA1F1E2_entry:
l6CA1F1E2:
	word32 eax_23 = 0x6C940000
	branch fn6CA1F054(0x6C940000) != 0x00000000 l6CA1F204
l6CA1F201_1:
	eax_23 = 0x00000000
l6CA1F204:
	return eax_23
fn6CA1F1E2_exit:


void fn6CA1F2C0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: Top
// Preserved: esp
fn6CA1F2C0_entry:
l6CA1F2C0:
	__fninit()
	return
fn6CA1F2C0_exit:


void fn6CA1F2C4(word32 eax)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax:[0..31]
// LiveOut:
// Trashed: SCZO Top
// Preserved: eax ecx esp
fn6CA1F2C4_entry:
l6CA1F2C4:
	word32 ecx_11 = fp + 0x00000004
	branch eax <u 0x00001000 l6CA1F2E6
l6CA1F2D1:
	ecx_11 = ecx_11 - 0x00001000
	Mem17[ecx_11:word32] = Mem15[ecx_11:word32]
	eax = eax - 0x00001000
	branch eax >u 0x00001000 l6CA1F2D1
l6CA1F2E6:
	word32 ecx_25 = ecx_11 - eax
	Mem28[ecx_25:word32] = Mem26[ecx_25:word32]
	return
fn6CA1F2C4_exit:


word32 fn6CA1F600()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: eax
// Trashed: eax Top
// Preserved: esp
fn6CA1F600_entry:
l6CA1F600:
	return 0x00000001
fn6CA1F600_exit:


word32 fn6CA1F608()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: eax
// Trashed: eax Top
// Preserved: esp
fn6CA1F608_entry:
l6CA1F608:
	return 0x00000001
fn6CA1F608_exit:


